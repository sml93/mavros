#!/usr/bin/env python
# vim:set ts=4 sw=4 et:
#
# Copyright 2015 UAVenture AG.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# Updated: Tarek Taha : tarek.taha@kustar.ac.ae, Vladimir Ermakov
#    - Changed topic names after re-factoring : https://github.com/mavlink/mavros/issues/233
#    - Use mavros.setpoint module for topics

import rospy
import thread
import threading
import time
import mavros

from numpy import linalg #linear algebra, can be used to find things like eigenvectors etc.
import numpy as np

from math import *
from mavros.utils import *
from mavros import setpoint as SP
from std_msgs.msg import Header #type 
from std_msgs.msg import Float64, Float32 #type from msg generation
from geometry_msgs.msg import PoseStamped, Quaternion, TwistStamped #geometry
#from tf.transformations import quaternion_from_euler #transformation
from mavros_msgs.srv import CommandLong #service_class
from sensor_msgs.msg import NavSatFix,Range,LaserScan #type
from mavros_msgs.msg import PositionTarget,Thrust
from tf2_msgs.msg import TFMessage
import time



class Straight_Inspection:
    """
    This class sends position targets to FCU's position controller
    """
    def __init__(self):
        self.x = None
        self.y = None
        self.z = None
        self.armed = False  
        self.timeout = 180
        self.rate = rospy.Rate(50) # 10hz is the original 
        self.local_position = PoseStamped() 
        self.counter = 0
        self.counter_2 = 0
        self.counter_3 = 0
        self.counter_4 = 0
        self.z_increment = 0.0
        self.sensor_0 = 0.0
        self.sensor_45 = 0.0
        self.sensor_90 = 0.0
        self.sensor_135 = 0.0 
        self.sensor_180 = 0.0
        self.sensor_225 = 0.0
        self.sensor_270 = 0.0
        self.sensor_315 = 0.0 
        self.kp = 0.8
        self.min_alt = 0.80
        self.wall_boundary = 1.50

        #rospy.Subscriber("subscribed topic",topic type,callback invoked with the message as the first arg)  

        rospy.Subscriber('/tf', TFMessage, self.callback_tf)
        rospy.Subscriber("scan",  LaserScan, self.scan_callback)
        rospy.Subscriber("mavros/local_position/pose", PoseStamped, self.position_callback)
        self.pub_pos = rospy.Publisher('mavros/setpoint_raw/local', PositionTarget, queue_size=10)
        self.pub_vis = rospy.Publisher('mavros/vision_pose/pose', PoseStamped, queue_size=10)
      
        while not rospy.is_shutdown(): #subsequent functions below are automatically run using this while loop (inert functions)  
            
            print "alti: ", abs(self.local_position.pose.position.z), "Counter: ", self.counter, "Counter2", self.counter_2, "Counter3", self.counter_3, "Counter4", self.counter_4, "Z:", self.z
            while not self.x or not self.y:
                time.sleep(0.01)

            if self.sensor_0 <= 2.40: # first wall
                self.counter = self.counter + 1
               
            if self.counter < 4:
                self.left() 
            
            elif self.counter >= 4:
                self.top_right_bot()  
            
            self.estimator()
            self.rate.sleep()
 

    def position_callback(self, data): # callback invoked with the message as the first arg
        self.local_position = data 


    def callback_tf(self,data):
        if data.transforms[0].child_frame_id == "base_footprint":
            self.y = -data.transforms[0].transform.translation.x
            self.x = data.transforms[0].transform.translation.y
            self.z = data.transforms[0].transform.translation.z


    def scan_callback(self,data):
        angle_ls = []
        for i in range(0,1440,180):
            angle_ls.append(-(i+1))

        self.scan = data
        self.sensor_0 = self.scan.ranges[angle_ls[0]]
        self.sensor_45 = self.scan.ranges[angle_ls[7]]
        self.sensor_90 = self.scan.ranges[angle_ls[6]]
        self.sensor_135 = self.scan.ranges[angle_ls[5]]
        self.sensor_180 = self.scan.ranges[angle_ls[4]]
        self.sensor_225 = self.scan.ranges[angle_ls[3]]
        self.sensor_270 = self.scan.ranges[angle_ls[2]]
        self.sensor_315 = self.scan.ranges[angle_ls[1]]  


    def left(self):
        # either u do the below or u need to use bitmasking for uint16, jus basically add the uint16 numbers found in mavros documentation
        pos = PositionTarget(coordinate_frame = PositionTarget.FRAME_LOCAL_NED, # (originally) Local coordinate frame, Z-up (x: north, y: east, z: down), somehow it transformed to ENU (x: east, y: north, z: up)
                             type_mask=
                             # PositionTarget.IGNORE_PX + PositionTarget.IGNORE_PY + PositionTarget.IGNORE_PZ +
                             PositionTarget.IGNORE_VX + PositionTarget.IGNORE_VY + PositionTarget.IGNORE_VZ +
                             PositionTarget.IGNORE_AFX + PositionTarget.IGNORE_AFY + PositionTarget.IGNORE_AFZ +
                             PositionTarget.IGNORE_YAW_RATE 
                             # PositionTarget.IGNORE_YAW
                             )

        pos.header.frame_id = "left" 

        # Establish desired setpoints
        pos.position.x = self.local_position.pose.position.x - (self.kp * ( self.sensor_0 - self.wall_boundary ))
        pos.position.y = self.local_position.pose.position.y - (self.kp * ( self.sensor_90 - self.wall_boundary ))
        pos.position.z = self.local_position.pose.position.z - (self.kp * ( self.local_position.pose.position.z - (self.min_alt + self.z_increment) ))    
            
        pos.yaw = radians(180.0 + (self.sensor_45 - self.sensor_135))

        pos.header.stamp = rospy.Time.now()
        self.pub_pos.publish(pos) 


    def top_right_bot(self):
        
        # either u do the below or u need to use bitmasking for uint16, jus basically add the uint16 numbers found in mavros documentation
        pos = PositionTarget(coordinate_frame = PositionTarget.FRAME_LOCAL_NED, # (originally) Local coordinate frame, Z-up (x: north, y: east, z: down), somehow it transformed to ENU (x: east, y: north, z: up)
                             type_mask=
                             # PositionTarget.IGNORE_PX + PositionTarget.IGNORE_PY + PositionTarget.IGNORE_PZ +
                             PositionTarget.IGNORE_VX + PositionTarget.IGNORE_VY + PositionTarget.IGNORE_VZ +
                             PositionTarget.IGNORE_AFX + PositionTarget.IGNORE_AFY + PositionTarget.IGNORE_AFZ +
                             PositionTarget.IGNORE_YAW_RATE 
                             # PositionTarget.IGNORE_YAW
                             )

        pos.header.frame_id = "top_right_bot" 


        if self.sensor_0 <= 2.20: # second wall
            self.counter_2 = self.counter_2 + 1


        if self.counter_2 < 4:    
            # Establish desired setpoints
            pos.position.x = self.local_position.pose.position.x - (self.kp * ( self.sensor_90 - self.wall_boundary ))
            pos.position.y = self.local_position.pose.position.y + (self.kp * ( self.sensor_0 - self.wall_boundary ))
            pos.position.z = self.local_position.pose.position.z - (self.kp * ( self.local_position.pose.position.z - (self.min_alt + self.z_increment) )) 
            
            pos.yaw = radians(90.0 + (self.sensor_45 - self.sensor_135))
            

        elif self.counter_2 >= 4:
                
            if self.sensor_180 >= 6.20: # third wall
                self.counter_3 = self.counter_3 + 1

            if self.counter_3 < 4:         
                pos.position.x = self.local_position.pose.position.x + (self.kp * ( self.sensor_0 - self.wall_boundary ))
                pos.position.y = self.local_position.pose.position.y + (self.kp * ( self.sensor_90 - self.wall_boundary ))
                pos.position.z = self.local_position.pose.position.z - (self.kp * ( self.local_position.pose.position.z - (self.min_alt + self.z_increment) ))
            
                pos.yaw = radians(0.0 + (self.sensor_45 - self.sensor_135))

            elif self.counter_3 >= 4:   

                if self.sensor_0 <= 2.50: # fourth wall
                    self.counter_4 = self.counter_4 + 1

                if self.counter_4 < 4:
                    pos.position.x = self.local_position.pose.position.x + (self.kp * ( self.sensor_90 - self.wall_boundary ))
                    pos.position.y = self.local_position.pose.position.y - (self.kp * ( self.sensor_0 - self.wall_boundary ))
                    pos.position.z = self.local_position.pose.position.z - (self.kp * ( self.local_position.pose.position.z - (self.min_alt + self.z_increment) ))
                
                    pos.yaw = radians(270.0 + (self.sensor_45 - self.sensor_135)) 

                elif self.counter_4 >= 4:
                    self.counter = 0
                    self.counter_2 = 0
                    self.counter_3 = 0
                    self.counter_4 = 0 
                    self.z_increment = self.z_increment + 0.30


        pos.header.stamp = rospy.Time.now()
        self.pub_pos.publish(pos)
        
            
    def estimator(self):

        # Initialise necessary headers
        pos = PoseStamped()
        pos.header = Header()
        pos.header.frame_id = "vision"

        pos.pose.position.x = self.x
        pos.pose.position.y = self.y
            
        pos.header.stamp = rospy.Time.now() # Update timestamp for each published SP
        self.pub_vis.publish(pos)
            

if __name__ == '__main__':
    rospy.init_node('shadow_test_node', anonymous=True)

    node = Straight_Inspection()

    rospy.spin()  # spin() simply keeps python from exiting until this node is stopped
     
