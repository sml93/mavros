#!/usr/bin/env python
# vim:set ts=4 sw=4 et:
#
# Copyright 2015 UAVenture AG.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# Updated: Tarek Taha : tarek.taha@kustar.ac.ae, Vladimir Ermakov
#    - Changed topic names after re-factoring : https://github.com/mavlink/mavros/issues/233
#    - Use mavros.setpoint module for topics

import rospy
import thread
import threading
import time
import mavros

from numpy import linalg #linear algebra, can be used to find things like eigenvectors etc.
import numpy as np

from math import *
from mavros.utils import *
from mavros import setpoint as SP
from std_msgs.msg import Header #type 
from std_msgs.msg import Float64, Float32 #type from msg generation
from geometry_msgs.msg import PoseStamped, Quaternion, TwistStamped #geometry
#from tf.transformations import quaternion_from_euler #transformation
from mavros_msgs.srv import CommandLong #service_class
from sensor_msgs.msg import NavSatFix,Range #type


class Straight_Inspection:
    """
    This class sends position targets to FCU's position controller
    """
    def __init__(self):
        self.z = 1.8   
        self.armed = False  
        self.sensor_0 = Range()
        self.sensor_45 = Range()
        self.sensor_90 = Range()
        self.sensor_135 = Range() #very impt, must initialise as Range()
        self.timeout = 180
        self.rate = rospy.Rate(50) # 10hz is the original 
        self.local_position = PoseStamped() 
        self.count = 0
        self.counter = 0

        rospy.wait_for_service('mavros/cmd/arming', 30) # wait for arming, queue for 30s

        #rospy.Subscriber("subscribed topic",topic type,callback invoked with the message as the first arg)  

        rospy.Subscriber("gazebo/range_0", Range, self.range_0)
        rospy.Subscriber("gazebo/range_45", Range, self.range_45)
        rospy.Subscriber("gazebo/range_90", Range, self.range_90)
        rospy.Subscriber("gazebo/range_135", Range, self.range_135)
        rospy.Subscriber("mavros/local_position/pose", PoseStamped, self.position_callback)
        self.pub_spt = rospy.Publisher('mavros/setpoint_position/local', PoseStamped, queue_size=10)
        self.pub_att = rospy.Publisher('mavros/setpoint_attitude/attitude', PoseStamped, queue_size=10)
        self.pub_thr = rospy.Publisher('mavros/setpoint_attitude/att_throttle', Float64, queue_size=10)

        rospy.wait_for_service('mavros/cmd/command', 30)
        self._srv_cmd_long = rospy.ServiceProxy('mavros/cmd/command', CommandLong, persistent=True)
      
        while not rospy.is_shutdown(): #subsequent functions below are automatically run using this while loop (inert functions)  
            
            self.arm() # Arming commences
            #print (self.local_position.pose.position.x, self.sensor_0, self.sensor_90)
            print self.sensor_45.range # run the node a few times if it doesnt respond at first call

            if abs(self.sensor_0.range - 4.0) <= 1.0 or abs(self.sensor_45.range - 5.0) <= 1.0 or abs(self.sensor_90.range - 4.0) <= 1.0:
                self.align()
                self.counter+=1       
  
            else: 
                self.closer_to_wall()

            if abs(self.sensor_135.range - self.sensor_45.range) < 2 and self.counter > 1:
                self.along_wall()

            # if abs(self.sensor_135.range - self.sensor_45.range) > 20 and self.counter > 1:
            # #    self.x = self.local_position.pose.position.x 
            # #    self.y = self.local_position.pose.position.y
            #     self.return_to_home()

            self.rate.sleep()

    def range_0(self,data):
        self.sensor_0 = data
    
    def range_45(self,data):
        self.sensor_45 = data

    def range_90(self,data):
        self.sensor_90 = data    

    def range_135(self,data):
        self.sensor_135 = data 

    def position_callback(self, data): # callback invoked with the message as the first arg
        self.local_position = data 

    def arm(self):
        if self.count < self.timeout:
            # FIXME: arm and switch to offboard
            # (need to wait the first few rounds until PX4 has the offboard stream)
            if not self.armed and self.count > 5:
                self._srv_cmd_long(False, 176, False,
                                   1, 6, 0, 0, 0, 0, 0)
                # make sure the first command doesn't get lost
                time.sleep(1)

                self._srv_cmd_long(False, 400, False,
                                   # arm
                                   1, 0, 0, 0, 0, 0, 0)

                self.armed = True
            self.count = self.count + 1
            self.rate.sleep() # The loop calls rate.sleep(), which sleeps just long enough to maintain the desired rate through the loop.

    
# Sample characteristics of a type PoseStamped
# goal = PoseStamped()
# goal.header.frame_id = "/base_link"
# goal.header.stamp = rospy.Time.now()
# goal.pose.position.z = 1.1
# goal.pose.position.x = 0.7
# goal.pose.position.y = -0.3
# goal.pose.orientation.w = 1.0
# arm_pub.publish(goal)
# rospy.sleep(1)
# plan.publish(Empty())

# rospy.sleep(5)

    def return_to_home(self): 
        # Initialise necessary headers
        pos = PoseStamped()
        pos.header = Header()
        pos.header.frame_id = "initial_alignment"
        pos.header.stamp = rospy.Time.now() # Update timestamp for each published SP

        # Establish desired setpoints
        pos.pose.position.x = 0 
        pos.pose.position.y = 0
        pos.pose.position.z = self.z

        # Establish desired attitude towards setpoint
        # For demo purposes we will lock yaw/heading to north.
        yaw_degrees = 0  # North = 90
        yaw = radians(yaw_degrees)

        quaternion = quaternion_from_euler(0,0,0.0) #roll,pitch,yaw
        pos.pose.orientation = Quaternion(*quaternion)
        
        # Publishing to rostopic   
        self.pub_spt.publish(pos) # updated pose from pos.pose.orientation

    def align(self): 
        # Initialise necessary headers
        pos = PoseStamped()
        pos.header = Header() # initialising a new header for a new PoseStamped()
        pos.header.frame_id = "initial_alignment"
        pos.header.stamp = rospy.Time.now() # Update timestamp for each published SP

        # Establish desired setpoints
        pos.pose.position.x = self.local_position.pose.position.x 
        pos.pose.position.y = self.local_position.pose.position.y
        pos.pose.position.z = self.local_position.pose.position.z

        # Establish desired orientation at setpoint
        roll_degrees = 0.0 
        roll = radians(roll_degrees)
        pitch_degrees = 0.0 
        pitch = radians(pitch_degrees)
        yaw_degrees = 90.0  # North
        yaw = radians(yaw_degrees)

        # Execute desired orientation
        quaternion = quaternion_from_euler(roll, pitch, yaw) #roll,pitch,yaw
        pos.pose.orientation = Quaternion(*quaternion)
        
        # Publishing to rostopic   
        self.pub_spt.publish(pos) # updated pose from pos.pose.orientation


    def closer_to_wall(self): 
        # Initialise necessary headers
        pos = PoseStamped()
        pos.header = Header()
        pos.header.frame_id = "closer_to_wall"
        pos.header.stamp = rospy.Time.now() # Update timestamp for each published SP

        # Establish desired setpoints
        pos.pose.position.x = self.local_position.pose.position.x + 0.3
        pos.pose.position.y = self.local_position.pose.position.y
        pos.pose.position.z = self.local_position.pose.position.z

        # Establish desired orientation at setpoint
        roll_degrees = 0.0 
        roll = radians(roll_degrees)
        pitch_degrees = 0.0 
        pitch = radians(pitch_degrees)
        yaw_degrees = 0.0 
        yaw = radians(yaw_degrees)

        # Execute desired orientation
        quaternion = quaternion_from_euler(roll, pitch, yaw)
        pos.pose.orientation = Quaternion(*quaternion)
        
        # Publishing to rostopic   
        self.pub_spt.publish(pos) # updated pose from pos.pose.orientation


    def along_wall(self): 
        # Initialise necessary headers
        pos = PoseStamped()
        pos.header = Header()
        pos.header.frame_id = "along_wall"
        pos.header.stamp = rospy.Time.now() # Update timestamp for each published SP

        # Establish desired setpoints
        pos.pose.position.x = self.local_position.pose.position.x 
        pos.pose.position.y = self.local_position.pose.position.y - 0.3
        #pos.pose.position.z = self.z
        pos.pose.position.z = self.local_position.pose.position.z

        # Establish desired orientation at setpoint
        roll_degrees = 0.0 
        roll = radians(roll_degrees)
        pitch_degrees = 0.0 
        pitch = radians(pitch_degrees)
        yaw_degrees = 90.0  # North
        yaw = radians(yaw_degrees)

        # Execute desired orientation
        quaternion = quaternion_from_euler(roll, pitch, yaw) #roll,pitch,yaw
        pos.pose.orientation = Quaternion(*quaternion)
        
        # Publishing to rostopic   
        self.pub_spt.publish(pos) # updated pose from pos.pose.orientation


if __name__ == '__main__':
    rospy.init_node('shadow_test_node', anonymous=True)

    node = Straight_Inspection()

    rospy.spin()  # spin() simply keeps python from exiting until this node is stopped
     

