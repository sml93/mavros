#!/usr/bin/env python
# vim:set ts=4 sw=4 et:
#
# Copyright 2015 UAVenture AG.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# Updated: Tarek Taha : tarek.taha@kustar.ac.ae, Vladimir Ermakov
#    - Changed topic names after re-factoring : https://github.com/mavlink/mavros/issues/233
#    - Use mavros.setpoint module for topics

import rospy
import thread
import threading
import time
import mavros

import numpy as np

from math import *
from mavros.utils import *
from mavros import setpoint as SP
from std_msgs.msg import Header #type 
from std_msgs.msg import Float64, Float32 #type from msg generation
from geometry_msgs.msg import PoseStamped, Quaternion, TwistStamped #geometry
from tf.transformations import quaternion_from_euler #transformation
from mavros_msgs.srv import CommandLong #service_class
from sensor_msgs.msg import NavSatFix,Range,LaserScan #type
from teraranger_array.msg import RangeArray


class shadow_rplidar_test:
    """
    This class sends position targets to FCU's position controller
    """
    def __init__(self):
        self.z = 1.0   
        self.armed = False  
        self.collective = RangeArray()
        self.rate = rospy.Rate(50) # 10hz is the original 
        self.sensor_0 = 0.0
        self.timeout = 180
        self.local_position = PoseStamped()
        self.count = 0
        self.sensor_0 = 0.0
        self.sensor_45 = 0.0
        self.sensor_90 = 0.0
        self.sensor_135 = 0.0 
        self.sensor_180 = 0.0
        self.sensor_225 = 0.0
        self.sensor_270 = 0.0
        self.sensor_315 = 0.0 

        rospy.wait_for_service('mavros/cmd/arming', 30) # wait for arming, queue for 30s

        #rospy.Subscriber("subscribed topic",topic type,callback invoked with the message as the first arg)  

        #rospy.Subscriber("hub_1/ranges_raw", RangeArray, self.hub_callback)
        rospy.Subscriber("scan",  LaserScan, self.scan_callback)
        #rospy.Subscriber("mavros/local_position/pose", PoseStamped, self.position_callback)
        #self.pub_spt = rospy.Publisher('mavros/setpoint_position/local', PoseStamped, queue_size=10)

      
        while not rospy.is_shutdown(): #subsequent functions below are automatically run using this while loop (inert functions)  
            
            print ("0:", self.sensor_0, "90:", self.sensor_90, "180:", self.sensor_180, "270:", self.sensor_270)   
            self.rate.sleep() #The loop calls rate.sleep(), which sleeps just long enough to maintain the desired rate through the loop.


    #def position_callback(self, data): # callback invoked with the message as the first arg
    #    self.local_position = data 
    
    def scan_callback(self,data):
        angle_ls = []
        for i in range(0,1440,180):
            angle_ls.append(-(i+1))

        #print data
        self.scan = data
        self.sensor_0 = self.scan.ranges[angle_ls[0]]
        self.sensor_45 = self.scan.ranges[angle_ls[7]]
        self.sensor_90 = self.scan.ranges[angle_ls[6]]
        self.sensor_135 = self.scan.ranges[angle_ls[5]]
        self.sensor_180 = self.scan.ranges[angle_ls[4]]
        self.sensor_225 = self.scan.ranges[angle_ls[3]]
        self.sensor_270 = self.scan.ranges[angle_ls[2]]
        self.sensor_315 = self.scan.ranges[angle_ls[1]]                                                 
                                                        

if __name__ == '__main__':
    rospy.init_node('shadow_rplidar_test', anonymous=True)

    node = shadow_rplidar_test()

    rospy.spin()  # spin() simply keeps python from exiting until this node is stopped
     

