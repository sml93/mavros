#!/usr/bin/env python
# vim:set ts=4 sw=4 et:
#
# Copyright 2015 UAVenture AG.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# Updated: Tarek Taha : tarek.taha@kustar.ac.ae, Vladimir Ermakov
#    - Changed topic names after re-factoring : https://github.com/mavlink/mavros/issues/233
#    - Use mavros.setpoint module for topics

import rospy
import thread
import threading
import time
import mavros

import numpy as np

from math import *
from mavros.utils import *
from mavros import setpoint as SP
from std_msgs.msg import Header #type 
from std_msgs.msg import Float64, Float32 #type from msg generation
from geometry_msgs.msg import PoseStamped, Quaternion, TwistStamped #geometry
#from tf.transformations import quaternion_from_euler #transformation
from mavros_msgs.srv import CommandLong #service_class
from mavros_msgs.msg import PositionTarget,ActuatorControl
from sensor_msgs.msg import NavSatFix,Range,LaserScan #type
#from teraranger_array.msg import RangeArray


class splash_hover:
    """
    This class sends position targets to FCU's position controller
    """
    def __init__(self):
        self.z = 1.8   
        self.armed = False  
        #self.collective = RangeArray()
        self.rate = rospy.Rate(50) # 10hz is the original 
        self.sensor_2 = 0.0
        self.sensor_6 = 0.0
        self.timeout = 180
        self.local_position = PoseStamped()
        self.count = 0
        self.counter = 0
        self.actuator_control_message = ActuatorControl() 
        self.seq = 1

        rospy.wait_for_service('mavros/cmd/arming', 30) # wait for arming, queue for 30s

        # rospy.Subscriber("subscribed topic",topic type,callback invoked with the message as the first arg)  

        #rospy.Subscriber("hub_1/ranges_raw", RangeArray, self.hub_callback)
        rospy.Subscriber("mavros/local_position/pose", PoseStamped, self.position_callback)
        self.pub_pos = rospy.Publisher('mavros/setpoint_raw/local', PositionTarget, queue_size=10)
        self.pub_spt = rospy.Publisher('mavros/setpoint_position/local', PoseStamped, queue_size=10)
        self.message_pub = rospy.Publisher("/mavros/actuator_control", ActuatorControl, queue_size=10)

        rospy.wait_for_service('mavros/cmd/command', 30)
        self._srv_cmd_long = rospy.ServiceProxy('mavros/cmd/command', CommandLong, persistent=True)
      
        while not rospy.is_shutdown(): #subsequent functions below are automatically run using this while loop (inert functions)  

            self.avoid()
            print "lalalalala"
            #print "left sensor: ", self.sensor_2, "right sensor: ", self.sensor_6 
            #print "Gimbal testing now @ yaw in Offboard Mode"
            #if self.seq % 2 == 0:
            #    self.yaw = 0.2
            #else:
            #    self.yaw = -0.2   
            #self.test()    
            #self.seq = self.seq + 1
            # self.avoid()
            # self.deviance()
                
            self.rate.sleep() # The loop calls rate.sleep(), which sleeps just long enough to maintain the desired rate through the loop.


    def hub_callback(self,msg): # callback invoked with the message as the first arg
        self.collective = msg
        for i in self.collective.ranges:
            # self.sensor_0 = self.collective.ranges[0].range 
            self.sensor_2 = self.collective.ranges[2].range
            self.sensor_6 = self.collective.ranges[6].range  

    def position_callback(self, data): # callback invoked with the message as the first arg
        self.local_position = data 

    def arm(self):
        if self.count < self.timeout:
            # FIXME: arm and switch to offboard
            # (need to wait the first few rounds until PX4 has the offboard stream)
            if not self.armed and self.count > 5:
                self._srv_cmd_long(False, 176, False,
                                   1, 6, 0, 0, 0, 0, 0)
                # make sure the first command doesn't get lost
                time.sleep(1)

                self._srv_cmd_long(False, 400, False,
                                   # arm
                                   1, 0, 0, 0, 0, 0, 0)

                self.armed = True
            self.count = self.count + 1
            self.rate.sleep() # The loop calls rate.sleep(), which sleeps just long enough to maintain the desired rate through the loop.


    def test(self):
                        #   r    p    y                  yaw  
        inputs = np.array((0.0, 0.0, 0.0, 0.2, 0.0, 0.0, 0.0, 0.0)) 
        self.actuator_control_message.controls = inputs
        self.actuator_control_message.header.stamp = rospy.Time.now()
        self.actuator_control_message.header.seq = self.seq
        self.actuator_control_message.group_mix = 0 # 0 is the default one for iris and quad, gimbal control ActuatorControl.PX4_MIX_PAYLOAD is the original, group 3 is for manual pass through, 2 for pxh shell only (vmount), 3 for RC, 1 is alternate and it can be implemented via mavros  
        # rospy.loginfo_throttle(2, inputs)
        self.message_pub.publish(self.actuator_control_message)

    def avoid(self): 
        # Initialise necessary headers
        pos = PoseStamped()
        pos.header = Header() # initialising a new header for a new PoseStamped()
        pos.header.frame_id = "avoid"

        # Establish desired setpoints
        pos.pose.position.x = 0.0 # North
        pos.pose.position.y = 0.0
        pos.pose.position.z = self.z 

        # Establish desired orientation at setpoint
        roll_degrees = 0.0 
        roll = radians(roll_degrees)
        pitch_degrees = 0.0 
        pitch = radians(pitch_degrees)
        yaw_degrees = 0.0  
        yaw = radians(yaw_degrees)

        # Execute desired orientation
        # quaternion = quaternion_from_euler(roll, pitch, yaw) #roll,pitch,yaw
        # pos.pose.orientation = Quaternion(*quaternion)

        qx = np.sin(roll/2) * np.cos(pitch/2) * np.cos(yaw/2) - np.cos(roll/2) * np.sin(pitch/2) * np.sin(yaw/2)
        qy = np.cos(roll/2) * np.sin(pitch/2) * np.cos(yaw/2) + np.sin(roll/2) * np.cos(pitch/2) * np.sin(yaw/2)
        qz = np.cos(roll/2) * np.cos(pitch/2) * np.sin(yaw/2) - np.sin(roll/2) * np.sin(pitch/2) * np.cos(yaw/2)
        qw = np.cos(roll/2) * np.cos(pitch/2) * np.cos(yaw/2) + np.sin(roll/2) * np.sin(pitch/2) * np.sin(yaw/2)

        quaternion = [qx,qy,qz,qw]  # drone only takes in quarternion values, therefore have to do euler to quarternion conversion
        pos.pose.orientation = Quaternion(*quaternion)
        
        pos.header.stamp = rospy.Time.now() # Update timestamp for each published SP

        # Publishing to rostopic   
        self.pub_spt.publish(pos) # updated pose from pos.pose.orientation


    def deviance(self):
        # either u do the below or u need to use bitmasking for uint16, jus basically add the uint16 numbers found in mavros documentation
        pos = PositionTarget(coordinate_frame = PositionTarget.FRAME_LOCAL_NED, # (originally) Local coordinate frame, Z-up (x: north, y: east, z: down), somehow it transformed to ENU (x: east, y: north, z: up)
                             type_mask=
                             # PositionTarget.IGNORE_PX + PositionTarget.IGNORE_PY + PositionTarget.IGNORE_PZ +
                             PositionTarget.IGNORE_VX + PositionTarget.IGNORE_VY + PositionTarget.IGNORE_VZ +
                             PositionTarget.IGNORE_AFX + PositionTarget.IGNORE_AFY + PositionTarget.IGNORE_AFZ +
                             PositionTarget.IGNORE_YAW_RATE 
                             # PositionTarget.IGNORE_YAW
                             )

        pos.header.frame_id = "deviance" 

        # Establish desired setpoints
        pos.position.x = self.local_position.pose.position.x 
        pos.position.y = self.local_position.pose.position.y 
        pos.position.z = self.local_position.pose.position.z 
            
        pos.yaw = radians(180.0)

        pos.header.stamp = rospy.Time.now()
        self.pub_pos.publish(pos) 

    

if __name__ == '__main__':
    rospy.init_node('splash_hover_node', anonymous=True)

    node = splash_hover()

    rospy.spin()  # spin() simply keeps python from exiting until this node is stopped
     

