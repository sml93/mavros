#!/usr/bin/env python
# vim:set ts=4 sw=4 et:
#
# Copyright 2015 UAVenture AG.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# Updated: Tarek Taha : tarek.taha@kustar.ac.ae, Vladimir Ermakov
#    - Changed topic names after re-factoring : https://github.com/mavlink/mavros/issues/233
#    - Use mavros.setpoint module for topics

import rospy
import thread
import threading
import time
import mavros

from numpy import linalg #linear algebra, can be used to find things like eigenvectors etc.
import numpy as np

from math import *
from mavros.utils import *
from mavros import setpoint as SP
from std_msgs.msg import Header #type 
from std_msgs.msg import Float64, Float32 #type from msg generation
from geometry_msgs.msg import PoseStamped, Quaternion, TwistStamped #geometry
from tf.transformations import quaternion_from_euler #transformation
from mavros_msgs.srv import CommandLong #service_class
from mavros_msgs.msg import PositionTarget,Thrust,AttitudeTarget
from sensor_msgs.msg import NavSatFix,Range #type


class vision:
    """
    This class sends position targets to FCU's position controller
    """
    def __init__(self):
        self.z = 0.9   
        self.kp = 0.02
        self.armed = False 
        self.altimeter = Range() 
        self.sensor_0 = Range()
        self.sensor_270 = Range()
        self.sensor_90 = Range()
        self.sensor_180 = Range() #very impt, must initialise as Range()
        self.timeout = 180
        self.rate = rospy.Rate(50) # 10hz is the original 
        self.local_position = PoseStamped() 
        self.count = 0
        self.counter = 0

        rospy.wait_for_service('mavros/cmd/arming', 30) # wait for arming, queue for 30s

        # rospy.Subscriber("subscribed topic",topic type,callback invoked with the message as the first arg)  

        rospy.Subscriber("gazebo/range_0", Range, self.range_0)
        rospy.Subscriber("gazebo/range_270", Range, self.range_270)
        rospy.Subscriber("gazebo/range_90", Range, self.range_90)
        rospy.Subscriber("gazebo/range_180", Range, self.range_180)
        rospy.Subscriber("distance_sensor", Range, self.altitude)
        rospy.Subscriber("mavros/local_position/pose", PoseStamped, self.position_callback)
        self.pub_spt = rospy.Publisher('mavros/setpoint_position/local', PoseStamped, queue_size=10)
        self.pub_vel = rospy.Publisher('mavros/setpoint_velocity/cmd_vel', TwistStamped, queue_size=10)
        self.pub_thr = rospy.Publisher('mavros/setpoint_attitude/thrust', Thrust, queue_size=10)
        self.pub_pos = rospy.Publisher('mavros/setpoint_raw/local', PositionTarget, queue_size=10)
        self.pub_att = rospy.Publisher('mavros/setpoint_raw/attitude', AttitudeTarget, queue_size=10)
        self.pub_vis = rospy.Publisher('mavros/vision_pose/pose', PoseStamped, queue_size=10)
        
        rospy.wait_for_service('mavros/cmd/command', 30)
        self._srv_cmd_long = rospy.ServiceProxy('mavros/cmd/command', CommandLong, persistent=True)
      
        while not rospy.is_shutdown(): #subsequent functions below are automatically run using this while loop (inert functions)  
            #self.arm() 
            print "0:", self.sensor_0.range, "90:", self.sensor_90.range, "180:", self.sensor_180.range, "270:", self.sensor_270.range, "altitude: ", abs(self.local_position.pose.position.z) 
          
    
            self.fly3() # this alone with all twist angular == 0.0 gives good altitude and navigation in gazebo @ velocity setpoints
            self.estimator()
            #self.att_ctrl()
            self.rate.sleep()

    def range_0(self,data):
        self.sensor_0 = data
    
    def range_270(self,data):
        self.sensor_270 = data

    def range_90(self,data):
        self.sensor_90 = data    

    def range_180(self,data):
        self.sensor_180 = data 

    def altitude(self,data):
        self.altimeter = data     

    def position_callback(self, data): # callback invoked with the message as the first arg
        self.local_position = data 

    def arm(self):
        if self.count < self.timeout:
            # FIXME: arm and switch to offboard
            # (need to wait the first few rounds until PX4 has the offboard stream)
            if not self.armed and self.count > 5:
                self._srv_cmd_long(False, 176, False,
                                   1, 6, 0, 0, 0, 0, 0)
                # make sure the first command doesn't get lost
                time.sleep(1)

                self._srv_cmd_long(False, 400, False,
                                   # arm
                                   1, 0, 0, 0, 0, 0, 0)

                self.armed = True
            self.count = self.count + 1
            self.rate.sleep() # The loop calls rate.sleep(), which sleeps just long enough to maintain the desired rate through the loop.

    
    def vel(self): # can afford to add in 90 and -90 deg sensors for centering later on, ENU frame by default
        pos = TwistStamped()
        pos.header = Header()
        pos.header.frame_id = "local_origin (velocity_setpoints)"

        if self.sensor_0.range >= 2.5:
            pos.twist.linear.x = 0.05 # east
            pos.twist.linear.y = 0.0 # north
            pos.twist.linear.z = 0.0 # up

            pos.twist.angular.x = 0.0
            pos.twist.angular.y = 0.0
            pos.twist.angular.z = 0.0 # angular velocity in z axis, basically will cause the drone to swirl about z axis.

        else:
            pos.twist.linear.x = 0.0
            pos.twist.linear.y = 0.0
            pos.twist.linear.z = 0.0

            pos.twist.angular.x = 0.0
            pos.twist.angular.y = 0.0
            pos.twist.angular.z = 0.0
    
        # update timestamp for each published SP
        pos.header.stamp = rospy.Time.now()
        self.pub_vel.publish(pos)

# front arrow and x direction faces east (ENU)
# y direction faces north 
# yaw angle look from bottom up, its clockwise ninety, the blue props are front 

# if jus using pos.position.z, drone defective in flying, keeps bouncing up and down, cannot trust position target!

    def fly(self):
        # either u do the below or u need to use bitmasking for uint16, jus basically add the uint16 numbers found in mavros documentation
        pos = PositionTarget(coordinate_frame = PositionTarget.FRAME_LOCAL_NED, # (originally) Local coordinate frame, Z-up (x: north, y: east, z: down), somehow it transformed to ENU (x: east, y: north, z: up)
                             type_mask=
                             #PositionTarget.IGNORE_PX + PositionTarget.IGNORE_PY + PositionTarget.IGNORE_PZ +
                             PositionTarget.IGNORE_VX + PositionTarget.IGNORE_VY + PositionTarget.IGNORE_VZ +
                             PositionTarget.IGNORE_AFX + PositionTarget.IGNORE_AFY + PositionTarget.IGNORE_AFZ + 
                             PositionTarget.IGNORE_YAW_RATE #+ PositionTarget.IGNORE_YAW
                             )

        pos.header.frame_id = "fly"  
        
        #pos.velocity.x = 0.008 # against north (+), north(-)
        #pos.velocity.y = 0.05 # east(+), against east(-)
        #pos.velocity.z = 0.0

        #pos.acceleration_or_force.z = 0.05

        # if abs(self.local_position.pose.position.z) <= 1.1:
        #     pos.velocity.z = 0.5

        # elif abs(self.local_position.pose.position.z) > 1.3:
        #     pos.velocity.z = -0.022

        pos.yaw = radians(3.0) # True North


        
        if self.sensor_0.range >= 1.5:
            #pos.position.x = -self.kp*(1.5 - self.local_position.pose.position.x))
            pos.position.x = self.local_position.pose.position.x + 0.08
            pos.position.y = self.local_position.pose.position.y
            pos.position.z = self.z

        elif self.sensor_0.range < 1.0:
            #pos.position.x = -(self.kp*(1.0 - self.local_position.pose.position.x))
            pos.position.x = self.local_position.pose.position.x - 0.08
            pos.position.y = self.local_position.pose.position.y 
            pos.position.z = self.z
            #pos.yaw = radians(-90.0)

        else:
            pos.position.x = self.local_position.pose.position.x 
            pos.position.y = self.local_position.pose.position.y 
            pos.position.z = self.z
         


        # if self.sensor_0.range >= 3.2:
        #     pos.position.x = self.local_position.pose.position.x + 0.1
        #     pos.position.y = self.local_position.pose.position.y
        #     pos.position.z = self.z 

        # elif self.sensor_0.range < 3.2:
        #     pos.position.x = self.local_position.pose.position.x 
        #     pos.position.y = self.local_position.pose.position.y - 0.1
        #     pos.position.z = self.z 
         
        # if self.sensor_270.range >= 2.0 and self.sensor_0.range >= 3.2:
        #     pos.position.x = self.local_position.pose.position.x 
        #     pos.position.y = self.local_position.pose.position.y + 0.01
        #     pos.position.z = self.z 

        # if self.sensor_270.range < 1.0 and self.sensor_0.range >= 3.2:
        #     pos.position.x = self.local_position.pose.position.x 
        #     pos.position.y = self.local_position.pose.position.y - 0.01
        #     pos.position.z = self.z 


        pos.header.stamp = rospy.Time.now()
        self.pub_pos.publish(pos)


    def throttle(self):
        t = Thrust()
        t.header = Header()
        t.header.frame_id = "thrust"
        # p_control
        #actual_z = self.local_position.pose.position.z
        #error = self.z - actual_z
        #kp = 0.1

        t.thrust = 0.3 # + (kp * error)
        t.header.stamp = rospy.Time.now()
        self.pub_thr.publish(t)


    def att_ctrl(self):
        att = AttitudeTarget(type_mask =
                             AttitudeTarget.IGNORE_ROLL_RATE + AttitudeTarget.IGNORE_PITCH_RATE + 
                             AttitudeTarget.IGNORE_YAW_RATE +
                             AttitudeTarget.IGNORE_ATTITUDE
                             )

        att.header.frame_id = "att_ctrl" 
        #att.body_rate.x = radians(0.5)
        #att.body_rate.y = 0.0
        att.thrust = 0.5 # can be used to control motor speed, but this configuration when combined with cmd_velocity caused the drone to flip and crash

        att.header.stamp = rospy.Time.now()
        self.pub_att.publish(att)


    def fly2(self):
        
        # Initialise necessary headers
        pos = PoseStamped()
        pos.header = Header()
        pos.header.frame_id = "fly2"
        

        if self.sensor_0.range >= 1.5:
            # Establish desired setpoints
            pos.pose.position.x = self.local_position.pose.position.x + 0.08
            pos.pose.position.y = self.local_position.pose.position.y
            pos.pose.position.z = self.z

            # Establish desired orientation at setpoint
            roll_degrees = 0.0 
            roll = radians(roll_degrees)
            pitch_degrees = 0.0 
            pitch = radians(pitch_degrees)
            yaw_degrees = 3.0 
            yaw = radians(yaw_degrees)

            # Execute desired orientation
            quaternion = quaternion_from_euler(roll, pitch, yaw)
            pos.pose.orientation = Quaternion(*quaternion)


        elif self.sensor_0.range < 1.0:
            # Establish desired setpoints
            pos.pose.position.x = self.local_position.pose.position.x - 0.08
            pos.pose.position.y = self.local_position.pose.position.y 
            pos.pose.position.z = self.z

            # Establish desired orientation at setpoint
            roll_degrees = 0.0 
            roll = radians(roll_degrees)
            pitch_degrees = 0.0 
            pitch = radians(pitch_degrees)
            yaw_degrees = 3.0 
            yaw = radians(yaw_degrees)

            # Execute desired orientation
            quaternion = quaternion_from_euler(roll, pitch, yaw)
            pos.pose.orientation = Quaternion(*quaternion)


        else:   
            # Establish desired setpoints
            pos.pose.position.x = self.local_position.pose.position.x 
            pos.pose.position.y = self.local_position.pose.position.y 
            pos.pose.position.z = self.local_position.pose.position.z

            # Establish desired orientation at setpoint
            roll_degrees = 0.0 
            roll = radians(roll_degrees)
            pitch_degrees = 0.0 
            pitch = radians(pitch_degrees)
            yaw_degrees = 3.0 
            yaw = radians(yaw_degrees)

            # Execute desired orientation
            quaternion = quaternion_from_euler(roll, pitch, yaw)
            pos.pose.orientation = Quaternion(*quaternion)
            

        pos.header.stamp = rospy.Time.now() # Update timestamp for each published SP
        self.pub_spt.publish(pos)


    def fly3(self):
        # either u do the below or u need to use bitmasking for uint16, jus basically add the uint16 numbers found in mavros documentation
        pos = PositionTarget(coordinate_frame = PositionTarget.FRAME_BODY_NED, # (originally) Local coordinate frame, Z-up (x: north, y: east, z: down), somehow it transformed to ENU (x: east, y: north, z: up)
                             type_mask=
                             PositionTarget.IGNORE_PX + PositionTarget.IGNORE_PY + PositionTarget.IGNORE_PZ +
                             #PositionTarget.IGNORE_VX + PositionTarget.IGNORE_VY + PositionTarget.IGNORE_VZ +
                             PositionTarget.IGNORE_AFX + PositionTarget.IGNORE_AFY + PositionTarget.IGNORE_AFZ + 
                             PositionTarget.IGNORE_YAW_RATE #+ PositionTarget.IGNORE_YAW
                             )

        pos.header.frame_id = "fly3"  
        
        if self.sensor_0.range >= 1.5:
            pos.velocity.x = 0.0 # against north (+), north(-), drone's west(+),east(-) 0.008
            pos.velocity.y = 0.08 # east(+), against east(-) ,drone's front(+),back(-)

            if abs(self.local_position.pose.position.z) <= 0.6:
                pos.velocity.z = 0.015

            elif abs(self.local_position.pose.position.z) > 0.8:
                pos.velocity.z = -0.015

            pos.yaw = radians(3.0) # True North


        elif self.sensor_0.range < 1.0:
            pos.velocity.x = 0.0 # against north (+), north(-), drone's west(+),east(-) -0.008
            pos.velocity.y = -0.08 # east(+), against east(-) ,drone's front(+),back(-)

            if abs(self.local_position.pose.position.z) <= 0.6:
                pos.velocity.z = 0.015

            elif abs(self.local_position.pose.position.z) > 0.8:
                pos.velocity.z = -0.015

            pos.yaw = radians(3.0) # True North


        else:
            pos.velocity.x = 0.0 # against north (+), north(-), drone's west(+),east(-) -0.008
            pos.velocity.y = 0.0 # east(+), against east(-) ,drone's front(+),back(-)

            if abs(self.local_position.pose.position.z) <= 0.6:
                pos.velocity.z = 0.015

            elif abs(self.local_position.pose.position.z) > 0.8:
                pos.velocity.z = -0.015

            pos.yaw = radians(3.0) # True North

         


        # if self.sensor_0.range >= 3.2:
        #     pos.position.x = self.local_position.pose.position.x + 0.1
        #     pos.position.y = self.local_position.pose.position.y
        #     pos.position.z = self.z 

        # elif self.sensor_0.range < 3.2:
        #     pos.position.x = self.local_position.pose.position.x 
        #     pos.position.y = self.local_position.pose.position.y - 0.1
        #     pos.position.z = self.z 
         
        # if self.sensor_270.range >= 2.0 and self.sensor_0.range >= 3.2:
        #     pos.position.x = self.local_position.pose.position.x 
        #     pos.position.y = self.local_position.pose.position.y + 0.01
        #     pos.position.z = self.z 

        # if self.sensor_270.range < 1.0 and self.sensor_0.range >= 3.2:
        #     pos.position.x = self.local_position.pose.position.x 
        #     pos.position.y = self.local_position.pose.position.y - 0.01
        #     pos.position.z = self.z 


        pos.header.stamp = rospy.Time.now()
        self.pub_pos.publish(pos)

    def estimator(self):

        # Initialise necessary headers
        pos = PoseStamped()
        pos.header = Header()
        pos.header.frame_id = "vision"

        if abs(self.sensor_90.range - self.sensor_270.range) <= 0.03 and abs(self.sensor_0.range - self.sensor_180.range) <= 0.03:
            # Establish desired setpoints
            pos.pose.position.x = 0.0
            pos.pose.position.y = 0.0 
            #if self.altimeter.range == 30.0:
            #    pos.pose.position.z = 0.0
            #else:
            #    pos.pose.position.z = self.altimeter.range


            # Establish desired orientation at setpoint
            # roll_degrees = 0.0 
            # roll = radians(roll_degrees)
            # pitch_degrees = 0.0 
            # pitch = radians(pitch_degrees)
            # yaw_degrees = 0.0 
            # yaw = radians(yaw_degrees)

            # # Execute desired orientation
            # quaternion = quaternion_from_euler(roll, pitch, yaw)
            # pos.pose.orientation = Quaternion(*quaternion)

        else:
            if self.sensor_0.range - self.sensor_180.range > 0.03:
                pos.pose.position.x = -(self.sensor_0.range - self.sensor_180.range) 

            elif self.sensor_180.range - self.sensor_0.range > 0.03:
                pos.pose.position.x = -(self.sensor_0.range - self.sensor_180.range) 

            if self.sensor_270.range - self.sensor_90.range > 0.03:
                pos.pose.position.y = -(self.sensor_270.range - self.sensor_90.range) 

            elif self.sensor_90.range - self.sensor_270.range > 0.03:
                pos.pose.position.y = -(self.sensor_270.range - self.sensor_90.range) 

            #if self.altimeter.range == 30.0:
            #    pos.pose.position.z = 0.0
            #else:
            #    pos.pose.position.z = self.altimeter.range

            # Establish desired orientation at setpoint
            # roll_degrees = 0.0 
            # roll = radians(roll_degrees)
            # pitch_degrees = 0.0 
            # pitch = radians(pitch_degrees)
            # yaw_degrees = 0.0 
            # yaw = radians(yaw_degrees)

            # # Execute desired orientation
            # quaternion = quaternion_from_euler(roll, pitch, yaw)
            # pos.pose.orientation = Quaternion(*quaternion)


        pos.header.stamp = rospy.Time.now() # Update timestamp for each published SP
        self.pub_vis.publish(pos)



if __name__ == '__main__':
    rospy.init_node('vision', anonymous=True)

    node = vision()

    rospy.spin()  # spin() simply keeps python from exiting until this node is stopped
     

